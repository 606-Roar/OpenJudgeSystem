@using NPOI.SS.Formula.Functions
@using OJS.Web.Areas.Contests.ViewModels
@using OJS.Web.Areas.Contests.ViewModels.Results
@using OJS.Common.Models;
@using Resource = Resources.Areas.Contests.Shared.ContestsProblemPartial

@model ContestProblemViewModel

<h2>@Model.Name</h2>

<div class="row">
    <div class="col-md-12">
        <div id="notify-container-@(Model.ProblemId)">
        </div>
    </div>
</div>

@{
    string className;
    if (Model.ShowResults)
    {
        className = "col-lg-8";
    }
    else
    {
        className = "col-lg-12";
    }
}

<div class="row">
    <div class=@className>
        <div class="materials">
            @foreach (var resource in Model.Resources)
            {
                string resourceLink;
                if (resource.ProblemType == ProblemResourceType.Video)
                {
                    resourceLink = resource.Link;
                }
                else
                {
                    resourceLink = Url.Action("DownloadResource", new { controller = ViewBag.CompeteType, id = resource.ResourceId });
                }

                if (resource.ProblemType == ProblemResourceType.ProblemDescription)
                {
                    <span class="glyphicon glyphicon-list-alt resource-glyph"></span>
                }
                else if (resource.ProblemType == ProblemResourceType.AuthorsSolution)
                {
                    <span class="glyphicon glyphicon-thumbs-up resource-glyph"></span>
                }
                else if (resource.ProblemType == ProblemResourceType.Video)
                {
                    <span class="glyphicon glyphicon-facetime-video resource-glyph"></span>
                }
                else
                {
                    <span class="glyphicon glyphicon-question-sign"></span>
                }
                <a href="@resourceLink" target="_blank" class="resource-link">@resource.Name</a>
            }
        </div>
        <div class="submision">
            @using (Ajax.BeginForm("Submit",
                new { controller = ViewBag.CompeteType, id = Model.ContestId },
                new AjaxOptions
                {
                    OnSuccess = "messageNotifier.notifySuccess",
                    OnFailure = "messageNotifier.notifyFailure",
                    OnBegin = "validateSubmit"
                },
                new { id = "problem_" + Model.ProblemId }))
            {
                @Html.HiddenFor(x => x.ProblemId)
                <textarea class="code-for-problem" id="code-problem-@Model.ProblemId" name="Content"></textarea>
                <div class="col-md-12">
                    <div class="pull-left submit-container">
                        <strong>@Resource.Allowed_working_time:</strong> @string.Format("{0:0.00}", Model.TimeLimit) sec.
                        <br />
                        <strong>@Resource.Allowed_memory:</strong> @string.Format("{0:0.00}", Model.MemoryLimit) MB
                        <br />
                        <strong>Checker:</strong> @Model.CheckerName
                        @if (!string.IsNullOrWhiteSpace(Model.CheckerDescription))
                        {
                            @:(@Model.CheckerDescription)
                        }
                    </div>
                    <div class="submit-container pull-right">
                        @(Html.Kendo().DropDownList()
                                .Name("SubmissionTypeId")
                                .DataTextField("Text")
                                .DataValueField("Value")
                                .DataSource(data => data.Read("GetAllowedSubmissionTypes", ViewBag.CompeteType, new { id = Model.ContestId }))
                                .HtmlAttributes(new { id = "dropdown_" + Model.ProblemId }))
                        <input type="submit" value="@Resource.Submit" class="k-button submision-submit-button" />
                    </div>
                </div>
                <div class="clearfix"></div>
            }
        </div>
    </div>

    @{
        var participantRowTemplate = "#= ParticipantName === '" + this.User.Identity.Name + "' ? \"<tr class='success'>\" : \"<tr>\"#" +
            "<td>#:ParticipantName#</td>" + "<td>#:Result# / #:MaximumPoints#</td></tr>";
    }

    @if (Model.ShowResults)
    {
        <div class="col-lg-4 problem-result-container visible-lg">
            @(Html.Kendo().Grid<ProblemResultViewModel>()
                .Name("ContestResults_" + Model.ProblemId)
                .ToolBar(tool => tool.Template(Resource.Problem_results))
                .Columns(col =>
                {
                    col.Bound(x => x.ParticipantName).Width(100);
                    col.Bound(x => x.Result).Width(80);
                })
                .DataSource(data =>
                {
                    data.Ajax()
                        .Sort(sort =>
                            {
                                sort.Add(x => x.Result).Descending();
                                sort.Add(x => x.ParticipantName).Ascending();
                            })
                        .Read("ByProblem", "Results", new { official = ViewBag.IsOfficial, id = Model.ProblemId })
                        .PageSize(8);
                })
                .Filterable(x => x.Enabled(false))
                .Pageable(x =>
                {
                    x.ButtonCount(4);
                    x.Refresh(true);
                    x.Info(false);
                })
                .ClientRowTemplate(participantRowTemplate)
                .TableHtmlAttributes(new { @class = "table table-striped table-bordered" })
                .HtmlAttributes(new { @class = "problem_submit_grid" })
            )
        </div>
    }
</div>

@{
    var clientTemplate = "#= IsCalculated ? IsCompiledSuccessfully ? displayTestRuns(TestRuns).concat(" +
                                    " SubmissionPoints.toString().concat(' / ').concat(MaximumPoints)) : " + "'" + Resource.Compile_time_error + "'" +
                                            ":" + "'" + Resource.Not_processed + "'" + "#";
}

@if (Model.ShowResults)
{
    <div class="row">
        <div class="col-md-12">
            @(Html.Kendo()
            .Grid<SubmissionResultViewModel>()
            .Name("Submissions_" + Model.ProblemId)
            .ToolBar(tool =>
            {
                tool.Template(Resource.Submissions);
            })
            .DataSource(data =>
            {
                data.Ajax()
                    .Sort(sort => sort.Add("SubmissionDate").Descending())
                    .Read(read => read.Action("ReadSubmissionResults", ViewBag.CompeteType, new { id = Model.ProblemId }))
                    .PageSize(10);
            })
            .Pageable(page =>
            {
                page.Info(false);
                page.Refresh(true);
            })
            .Columns(col =>
            {
                col.Bound(model => model.SubmissionPoints).ClientTemplate(clientTemplate);
                col.Template(@<text></text>)
                    .Title(Resource.Time_and_memory)
                    .ClientTemplate("#= IsCalculated && IsCompiledSuccessfully ? displayMaximumValues(MaximumMemoryUsed, MaximumTimeUsed, '"
                    + Resource.Memory + "','" + Resource.Time + "') : '---' #");
                col.Bound(model => model.SubmissionDate).Width(300).ClientTemplate("#= kendo.format('{0:HH:mm:ss dd.MM.yyyy}', SubmissionDate) # <a href='/Contests/Submissions/View/#=SubmissionId#' target='_blank' class='view-submission-button btn btn-default pull-right'>" + Resource.Details + "</div>");
            }).HtmlAttributes(new { @class = "problem_submit_grid" })
            )
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-12">
            @(Html.Kendo()
            .Grid<SubmissionResultIsCompiledViewModel>()
            .Name("Submissions_" + Model.ProblemId)
            .ToolBar(tool =>
            {
                tool.Template(Resource.Submissions);
            })
            .DataSource(data =>
            {
                data.Ajax()
                    .Sort(sort => sort.Add("SubmissionDate").Descending())
                    .Read(read => read.Action("ReadSubmissionResultsAreCompiled", ViewBag.CompeteType, new { id = Model.ProblemId }))
                    .PageSize(10);
            })
            .Pageable(page =>
            {
                page.Info(false);
                page.Refresh(true);
            })
            .Columns(col =>
            {
                col.Bound(model => model.IsCompiledSuccessfully).ClientTemplate("#= IsCalculated ? IsCompiledSuccessfully ? " + "'" + Resource.Compiled_successfully + "'" + " : '" + Resource.Compile_time_error + "' : '" + Resource.Not_processed + "' #");
                col.Bound(model => model.SubmissionDate).Width(300).ClientTemplate("#= kendo.format('{0:HH:mm:ss dd.MM.yyyy}', SubmissionDate) # <a href='/Contests/Submissions/View/#=Id#' target='_blank' class='view-submission-button btn btn-default pull-right'>" + Resource.Details + "</div>");
            }).HtmlAttributes(new { @class = "problem_submit_grid" })
            )
        </div>
    </div>
}